/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package de.hszemi.rmsplugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import de.hszemi.rmsplugin.psi.RmsTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Rms.flex</tt>
 */
class RmsLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VALUE = 2;
  public static final int IN_COMMENT = 4;
  public static final int IN_PLAYER_SETUP = 6;
  public static final int IN_LAND_GENERATION = 8;
  public static final int IN_ELEVATION_GENERATION = 10;
  public static final int IN_CLIFF_GENERATION = 12;
  public static final int IN_TERRAIN_GENERATION = 14;
  public static final int IN_CONNECTION_GENERATION = 16;
  public static final int IN_OBJECTS_GENERATION = 18;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3, 
     3,  3,  3, 3
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\1\1\1\4\1\1\22\0\1\70\2\0\1\5\4\0\1\63\1\64\1\67\1\0\1\65\1"+
    "\13\1\12\1\66\1\11\11\14\2\0\1\36\1\0\1\50\2\0\1\41\1\61\1\57\1\52\1\43\1"+
    "\60\1\53\1\7\1\54\1\62\1\7\1\40\1\7\1\51\1\55\1\37\1\7\1\44\1\45\1\46\1\47"+
    "\1\56\2\7\1\42\1\7\4\0\1\10\1\0\1\21\1\6\1\31\1\24\1\27\1\34\1\6\1\32\1\33"+
    "\2\6\1\35\1\26\1\23\1\25\1\30\1\6\1\22\1\17\1\20\6\6\1\15\1\0\1\16\7\0\1\1"+
    "\242\0\2\1\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\1\1\3\1\4\1\5\1\1"+
    "\1\5\1\6\1\7\5\3\1\1\1\10\1\11\1\12"+
    "\1\1\1\2\2\13\6\14\7\15\1\16\5\3\1\17"+
    "\7\0\1\20\1\0\5\15\1\17\1\3\1\21\3\3"+
    "\7\0\1\22\1\23\1\15\1\21\3\15\3\3\1\24"+
    "\1\3\7\0\3\15\1\24\1\15\2\3\1\25\2\3"+
    "\7\0\2\15\1\25\2\15\2\3\1\26\1\3\7\0"+
    "\2\15\1\26\1\15\3\3\7\0\3\15\3\3\7\0"+
    "\3\15\3\3\7\0\3\15\1\3\1\27\1\3\7\0"+
    "\1\15\1\27\1\15\2\3\7\0\2\15\1\30\1\3"+
    "\7\0\1\30\1\15\1\3\7\0\1\15\1\31\1\32"+
    "\6\0\1\31\14\0\1\33\10\0\1\34\6\0\1\35"+
    "\1\36\3\0\1\37\1\0\1\40";

  private static int [] zzUnpackAction() {
    int [] result = new int[258];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\344\0\u0201\0\u023a\0\344\0\344\0\u0273\0\u02ac"+
    "\0\u02e5\0\u031e\0\u0357\0\u0390\0\344\0\344\0\344\0\u03c9"+
    "\0\u0402\0\u0402\0\u043b\0\u0474\0\u04ad\0\u011d\0\u04e6\0\344"+
    "\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c\0\u0675\0\u06ae"+
    "\0\u0156\0\u06e7\0\u0720\0\u0759\0\u0792\0\u07cb\0\u018f\0\u0804"+
    "\0\u083d\0\u0876\0\u08af\0\u08e8\0\u0921\0\u095a\0\u0402\0\u0993"+
    "\0\u09cc\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0\0\u0558\0\u0ae9\0\u018f"+
    "\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1"+
    "\0\u0cea\0\u0d23\0\344\0\344\0\u0d5c\0\u0558\0\u0d95\0\u0dce"+
    "\0\u0e07\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96"+
    "\0\u0fcf\0\u1008\0\u1041\0\u107a\0\u10b3\0\u10ec\0\u1125\0\u115e"+
    "\0\u1197\0\u11d0\0\u1209\0\u1242\0\u018f\0\u127b\0\u12b4\0\u12ed"+
    "\0\u1326\0\u135f\0\u1398\0\u13d1\0\u140a\0\u1443\0\u147c\0\u14b5"+
    "\0\u0558\0\u14ee\0\u1527\0\u1560\0\u1599\0\u018f\0\u15d2\0\u160b"+
    "\0\u1644\0\u167d\0\u16b6\0\u16ef\0\u1728\0\u1761\0\u179a\0\u17d3"+
    "\0\u0558\0\u180c\0\u1845\0\u187e\0\u18b7\0\u18f0\0\u1929\0\u1962"+
    "\0\u199b\0\u19d4\0\u1a0d\0\u1a46\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a"+
    "\0\u1b63\0\u1b9c\0\u1bd5\0\u1c0e\0\u1c47\0\u1c80\0\u1cb9\0\u1cf2"+
    "\0\u1d2b\0\u1d64\0\u1d9d\0\u1dd6\0\u1e0f\0\u1e48\0\u1e81\0\u1eba"+
    "\0\u1ef3\0\u1f2c\0\u1f65\0\u1f9e\0\u1fd7\0\u2010\0\u2049\0\u2082"+
    "\0\u20bb\0\u20f4\0\u018f\0\u212d\0\u2166\0\u219f\0\u21d8\0\u2211"+
    "\0\u224a\0\u2283\0\u22bc\0\u22f5\0\u0558\0\u232e\0\u2367\0\u23a0"+
    "\0\u23d9\0\u2412\0\u244b\0\u2484\0\u24bd\0\u24f6\0\u252f\0\u2568"+
    "\0\u25a1\0\u018f\0\u25da\0\u2613\0\u264c\0\u2685\0\u26be\0\u26f7"+
    "\0\u2730\0\u2769\0\u0558\0\u27a2\0\u27db\0\u2814\0\u284d\0\u2886"+
    "\0\u28bf\0\u28f8\0\u2931\0\u296a\0\u29a3\0\u018f\0\344\0\u29dc"+
    "\0\u2a15\0\u2a4e\0\u2a87\0\u2ac0\0\u2af9\0\u0558\0\u2b32\0\u2b6b"+
    "\0\u2ba4\0\u2bdd\0\u2c16\0\u2c4f\0\u2c88\0\u2cc1\0\u2cfa\0\u2d33"+
    "\0\u2d6c\0\u2da5\0\344\0\u2dde\0\u2e17\0\u2e50\0\u2e89\0\u2ec2"+
    "\0\u2efb\0\u2f34\0\u2f6d\0\344\0\u2fa6\0\u2fdf\0\u3018\0\u3051"+
    "\0\u308a\0\u30c3\0\344\0\344\0\u30fc\0\u3135\0\u316e\0\344"+
    "\0\u31a7\0\344";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[258];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\4\6\1\7\1\10\2\11\1\12\1\10\1\13"+
    "\1\14\1\15\1\16\1\17\2\10\1\20\4\10\1\21"+
    "\1\22\2\10\1\23\2\10\1\24\11\11\1\5\12\11"+
    "\1\25\1\26\1\27\1\30\1\5\1\6\1\5\1\31"+
    "\1\32\1\33\1\32\1\7\1\10\2\11\1\12\1\10"+
    "\1\13\1\14\1\15\1\16\1\17\2\10\1\20\4\10"+
    "\1\21\1\22\2\10\1\23\2\10\1\24\11\11\1\5"+
    "\12\11\1\25\1\26\1\27\1\30\1\5\1\33\1\34"+
    "\1\35\1\36\2\35\61\34\1\37\1\40\1\41\1\5"+
    "\4\6\1\7\1\42\1\11\1\43\1\12\1\10\1\13"+
    "\1\14\1\15\1\16\1\44\2\42\1\45\4\42\1\46"+
    "\1\47\2\42\1\50\2\42\1\24\11\11\1\5\12\11"+
    "\1\25\1\26\1\27\1\30\1\5\1\6\72\0\4\6"+
    "\63\0\1\6\6\0\1\51\1\0\1\51\6\0\17\51"+
    "\41\0\5\10\1\0\1\10\2\0\17\10\1\0\11\10"+
    "\1\0\12\10\14\0\1\10\3\11\1\10\1\0\1\11"+
    "\2\0\17\10\1\0\11\11\1\0\12\11\22\0\1\14"+
    "\65\0\1\14\2\0\1\14\62\0\5\10\1\0\1\10"+
    "\2\0\1\10\1\52\15\10\1\0\11\10\1\0\12\10"+
    "\14\0\5\10\1\0\1\10\2\0\4\10\1\53\12\10"+
    "\1\0\11\10\1\0\12\10\14\0\5\10\1\0\1\10"+
    "\2\0\4\10\1\54\11\10\1\55\1\0\11\10\1\0"+
    "\12\10\14\0\5\10\1\0\1\10\2\0\10\10\1\56"+
    "\6\10\1\0\11\10\1\0\12\10\14\0\5\10\1\0"+
    "\1\10\2\0\15\10\1\57\1\10\1\0\11\10\1\0"+
    "\12\10\45\0\1\60\1\61\2\0\1\62\2\0\1\63"+
    "\6\0\1\64\1\0\1\65\100\0\1\66\2\0\4\67"+
    "\63\0\1\67\1\0\1\6\3\33\63\0\1\33\2\34"+
    "\1\0\64\34\1\0\2\34\1\35\1\6\2\35\62\34"+
    "\1\0\1\35\2\34\1\0\64\34\1\66\2\34\1\35"+
    "\1\6\2\35\62\34\1\70\1\35\6\0\1\42\1\10"+
    "\2\42\1\10\1\0\1\42\2\0\17\42\1\0\11\10"+
    "\1\0\12\10\14\0\1\42\1\11\2\43\1\10\1\0"+
    "\1\43\2\0\17\42\1\0\11\11\1\0\12\11\14\0"+
    "\1\42\1\10\2\42\1\10\1\0\1\42\2\0\1\42"+
    "\1\71\15\42\1\0\11\10\1\0\12\10\14\0\1\42"+
    "\1\10\2\42\1\10\1\0\1\42\2\0\4\42\1\72"+
    "\12\42\1\0\11\10\1\0\12\10\14\0\1\42\1\10"+
    "\2\42\1\10\1\0\1\42\2\0\4\42\1\73\11\42"+
    "\1\74\1\0\11\10\1\0\12\10\14\0\1\42\1\10"+
    "\2\42\1\10\1\0\1\42\2\0\10\42\1\75\6\42"+
    "\1\0\11\10\1\0\12\10\14\0\1\42\1\10\2\42"+
    "\1\10\1\0\1\42\2\0\15\42\1\76\1\42\1\0"+
    "\11\10\1\0\12\10\14\0\5\10\1\0\1\10\2\0"+
    "\2\10\1\77\14\10\1\0\11\10\1\0\12\10\14\0"+
    "\5\10\1\0\1\10\2\0\5\10\1\100\11\10\1\0"+
    "\11\10\1\0\12\10\14\0\5\10\1\0\1\10\2\0"+
    "\5\10\1\101\11\10\1\0\11\10\1\0\12\10\14\0"+
    "\5\10\1\0\1\10\2\0\1\102\16\10\1\0\11\10"+
    "\1\0\12\10\14\0\5\10\1\0\1\10\2\0\3\10"+
    "\1\103\13\10\1\0\11\10\1\0\12\10\46\0\1\104"+
    "\71\0\1\105\67\0\1\106\73\0\1\107\106\0\1\110"+
    "\47\0\1\111\14\0\1\112\103\0\1\113\66\0\1\114"+
    "\10\0\1\42\1\10\2\42\1\10\1\0\1\42\2\0"+
    "\2\42\1\115\14\42\1\0\11\10\1\0\12\10\14\0"+
    "\1\42\1\10\2\42\1\10\1\0\1\42\2\0\5\42"+
    "\1\116\11\42\1\0\11\10\1\0\12\10\14\0\1\42"+
    "\1\10\2\42\1\10\1\0\1\42\2\0\5\42\1\117"+
    "\11\42\1\0\11\10\1\0\12\10\14\0\1\42\1\10"+
    "\2\42\1\10\1\0\1\42\2\0\1\120\16\42\1\0"+
    "\11\10\1\0\12\10\14\0\1\42\1\10\2\42\1\10"+
    "\1\0\1\42\2\0\3\42\1\121\13\42\1\0\11\10"+
    "\1\0\12\10\14\0\5\10\1\0\1\10\2\0\3\10"+
    "\1\122\13\10\1\0\11\10\1\0\12\10\14\0\2\10"+
    "\1\123\2\10\1\0\1\10\2\0\14\10\1\124\2\10"+
    "\1\0\11\10\1\0\12\10\14\0\5\10\1\0\1\10"+
    "\2\0\10\10\1\125\6\10\1\0\11\10\1\0\12\10"+
    "\14\0\5\10\1\0\1\10\2\0\12\10\1\126\4\10"+
    "\1\0\11\10\1\0\12\10\47\0\1\127\100\0\1\130"+
    "\62\0\1\131\71\0\1\132\106\0\1\133\62\0\1\134"+
    "\65\0\1\135\25\0\1\42\1\10\2\42\1\10\1\0"+
    "\1\42\2\0\3\42\1\136\13\42\1\0\11\10\1\0"+
    "\12\10\14\0\1\42\1\10\1\137\1\42\1\10\1\0"+
    "\1\42\2\0\14\42\1\140\2\42\1\0\11\10\1\0"+
    "\12\10\14\0\1\42\1\10\2\42\1\10\1\0\1\42"+
    "\2\0\10\42\1\141\6\42\1\0\11\10\1\0\12\10"+
    "\14\0\1\42\1\10\2\42\1\10\1\0\1\42\2\0"+
    "\12\42\1\142\4\42\1\0\11\10\1\0\12\10\14\0"+
    "\5\10\1\0\1\10\2\0\1\10\1\143\15\10\1\0"+
    "\11\10\1\0\12\10\14\0\5\10\1\0\1\10\2\0"+
    "\3\10\1\144\13\10\1\0\11\10\1\0\12\10\14\0"+
    "\5\10\1\0\1\10\2\0\15\10\1\145\1\10\1\0"+
    "\11\10\1\0\12\10\14\0\5\10\1\0\1\10\2\0"+
    "\14\10\1\146\2\10\1\0\11\10\1\0\12\10\14\0"+
    "\5\10\1\0\1\10\2\0\10\10\1\147\6\10\1\0"+
    "\11\10\1\0\12\10\50\0\1\150\100\0\1\151\74\0"+
    "\1\152\56\0\1\153\67\0\1\154\105\0\1\155\61\0"+
    "\1\156\25\0\1\42\1\10\2\42\1\10\1\0\1\42"+
    "\2\0\1\42\1\157\15\42\1\0\11\10\1\0\12\10"+
    "\14\0\1\42\1\10\2\42\1\10\1\0\1\42\2\0"+
    "\3\42\1\160\13\42\1\0\11\10\1\0\12\10\14\0"+
    "\1\42\1\10\2\42\1\10\1\0\1\42\2\0\15\42"+
    "\1\161\1\42\1\0\11\10\1\0\12\10\14\0\1\42"+
    "\1\10\2\42\1\10\1\0\1\42\2\0\14\42\1\162"+
    "\2\42\1\0\11\10\1\0\12\10\14\0\1\42\1\10"+
    "\2\42\1\10\1\0\1\42\2\0\10\42\1\163\6\42"+
    "\1\0\11\10\1\0\12\10\14\0\2\10\1\164\2\10"+
    "\1\0\1\10\2\0\17\10\1\0\11\10\1\0\12\10"+
    "\14\0\5\10\1\0\1\10\2\0\2\10\1\165\14\10"+
    "\1\0\11\10\1\0\12\10\14\0\5\10\1\0\1\10"+
    "\2\0\15\10\1\166\1\10\1\0\11\10\1\0\12\10"+
    "\14\0\5\10\1\0\1\10\2\0\4\10\1\167\12\10"+
    "\1\0\11\10\1\0\12\10\51\0\1\170\35\0\1\171"+
    "\121\0\1\172\70\0\1\173\106\0\1\174\71\0\1\175"+
    "\53\0\1\176\33\0\1\42\1\10\1\177\1\42\1\10"+
    "\1\0\1\42\2\0\17\42\1\0\11\10\1\0\12\10"+
    "\14\0\1\42\1\10\2\42\1\10\1\0\1\42\2\0"+
    "\2\42\1\200\14\42\1\0\11\10\1\0\12\10\14\0"+
    "\1\42\1\10\2\42\1\10\1\0\1\42\2\0\15\42"+
    "\1\201\1\42\1\0\11\10\1\0\12\10\14\0\1\42"+
    "\1\10\2\42\1\10\1\0\1\42\2\0\4\42\1\202"+
    "\12\42\1\0\11\10\1\0\12\10\14\0\5\10\1\0"+
    "\1\10\2\0\3\10\1\203\13\10\1\0\11\10\1\0"+
    "\12\10\14\0\5\10\1\0\1\10\2\0\4\10\1\204"+
    "\12\10\1\0\11\10\1\0\12\10\14\0\5\10\1\0"+
    "\1\10\2\0\1\10\1\205\15\10\1\0\11\10\1\0"+
    "\12\10\52\0\1\206\77\0\1\207\63\0\1\210\76\0"+
    "\1\211\62\0\1\212\32\0\1\213\137\0\1\214\17\0"+
    "\1\42\1\10\2\42\1\10\1\0\1\42\2\0\3\42"+
    "\1\215\13\42\1\0\11\10\1\0\12\10\14\0\1\42"+
    "\1\10\2\42\1\10\1\0\1\42\2\0\4\42\1\216"+
    "\12\42\1\0\11\10\1\0\12\10\14\0\1\42\1\10"+
    "\2\42\1\10\1\0\1\42\2\0\1\42\1\217\15\42"+
    "\1\0\11\10\1\0\12\10\14\0\5\10\1\0\1\10"+
    "\2\0\2\10\1\220\14\10\1\0\11\10\1\0\12\10"+
    "\14\0\5\10\1\0\1\10\2\0\5\10\1\221\11\10"+
    "\1\0\11\10\1\0\12\10\14\0\2\10\1\222\2\10"+
    "\1\0\1\10\2\0\17\10\1\0\11\10\1\0\12\10"+
    "\16\0\1\223\123\0\1\224\101\0\1\225\65\0\1\226"+
    "\64\0\1\227\76\0\1\230\63\0\1\231\30\0\1\42"+
    "\1\10\2\42\1\10\1\0\1\42\2\0\2\42\1\232"+
    "\14\42\1\0\11\10\1\0\12\10\14\0\1\42\1\10"+
    "\2\42\1\10\1\0\1\42\2\0\5\42\1\233\11\42"+
    "\1\0\11\10\1\0\12\10\14\0\1\42\1\10\1\234"+
    "\1\42\1\10\1\0\1\42\2\0\17\42\1\0\11\10"+
    "\1\0\12\10\14\0\5\10\1\0\1\10\2\0\4\10"+
    "\1\235\12\10\1\0\11\10\1\0\12\10\14\0\5\10"+
    "\1\0\1\10\2\0\6\10\1\236\10\10\1\0\11\10"+
    "\1\0\12\10\14\0\5\10\1\0\1\10\2\0\12\10"+
    "\1\237\4\10\1\0\11\10\1\0\12\10\53\0\1\240"+
    "\74\0\1\241\74\0\1\242\23\0\1\243\70\0\1\244"+
    "\123\0\1\245\101\0\1\246\22\0\1\42\1\10\2\42"+
    "\1\10\1\0\1\42\2\0\4\42\1\247\12\42\1\0"+
    "\11\10\1\0\12\10\14\0\1\42\1\10\2\42\1\10"+
    "\1\0\1\42\2\0\6\42\1\250\10\42\1\0\11\10"+
    "\1\0\12\10\14\0\1\42\1\10\2\42\1\10\1\0"+
    "\1\42\2\0\12\42\1\251\4\42\1\0\11\10\1\0"+
    "\12\10\14\0\5\10\1\0\1\10\2\0\5\10\1\252"+
    "\11\10\1\0\11\10\1\0\12\10\14\0\5\10\1\0"+
    "\1\10\2\0\7\10\1\253\7\10\1\0\11\10\1\0"+
    "\12\10\14\0\5\10\1\0\1\10\2\0\13\10\1\254"+
    "\3\10\1\0\11\10\1\0\12\10\51\0\1\255\70\0"+
    "\1\256\76\0\1\257\72\0\1\260\70\0\1\261\66\0"+
    "\1\262\74\0\1\263\21\0\1\42\1\10\2\42\1\10"+
    "\1\0\1\42\2\0\5\42\1\264\11\42\1\0\11\10"+
    "\1\0\12\10\14\0\1\42\1\10\2\42\1\10\1\0"+
    "\1\42\2\0\7\42\1\265\7\42\1\0\11\10\1\0"+
    "\12\10\14\0\1\42\1\10\2\42\1\10\1\0\1\42"+
    "\2\0\13\42\1\266\3\42\1\0\11\10\1\0\12\10"+
    "\14\0\5\10\1\0\1\10\2\0\6\10\1\267\10\10"+
    "\1\0\11\10\1\0\12\10\14\0\5\10\1\0\1\10"+
    "\2\0\2\10\1\270\14\10\1\0\11\10\1\0\12\10"+
    "\54\0\1\271\66\0\1\272\34\0\1\273\123\0\1\274"+
    "\70\0\1\275\70\0\1\276\76\0\1\277\25\0\1\42"+
    "\1\10\2\42\1\10\1\0\1\42\2\0\6\42\1\300"+
    "\10\42\1\0\11\10\1\0\12\10\14\0\1\42\1\10"+
    "\2\42\1\10\1\0\1\42\2\0\2\42\1\301\14\42"+
    "\1\0\11\10\1\0\12\10\14\0\5\10\1\0\1\10"+
    "\2\0\7\10\1\302\7\10\1\0\11\10\1\0\12\10"+
    "\14\0\5\10\1\0\1\10\2\0\4\10\1\303\12\10"+
    "\1\0\11\10\1\0\12\10\55\0\1\304\62\0\1\305"+
    "\102\0\1\306\66\0\1\307\70\0\1\310\63\0\1\311"+
    "\34\0\1\312\66\0\1\42\1\10\2\42\1\10\1\0"+
    "\1\42\2\0\7\42\1\313\7\42\1\0\11\10\1\0"+
    "\12\10\14\0\1\42\1\10\2\42\1\10\1\0\1\42"+
    "\2\0\4\42\1\314\12\42\1\0\11\10\1\0\12\10"+
    "\14\0\5\10\1\0\1\10\2\0\12\10\1\315\4\10"+
    "\1\0\11\10\1\0\12\10\45\0\1\316\77\0\1\317"+
    "\65\0\1\320\70\0\1\321\70\0\1\322\66\0\1\323"+
    "\102\0\1\324\23\0\1\42\1\10\2\42\1\10\1\0"+
    "\1\42\2\0\12\42\1\325\4\42\1\0\11\10\1\0"+
    "\12\10\14\0\5\10\1\0\1\10\2\0\10\10\1\326"+
    "\6\10\1\0\11\10\1\0\12\10\56\0\1\327\74\0"+
    "\1\330\65\0\1\331\63\0\1\332\70\0\1\333\72\0"+
    "\1\334\65\0\1\335\33\0\1\42\1\10\2\42\1\10"+
    "\1\0\1\42\2\0\10\42\1\336\6\42\1\0\11\10"+
    "\1\0\12\10\63\0\1\337\56\0\1\340\66\0\1\341"+
    "\70\0\1\342\103\0\1\343\65\0\1\344\70\0\1\345"+
    "\63\0\1\346\72\0\1\347\70\0\1\350\77\0\1\351"+
    "\56\0\1\352\75\0\1\353\61\0\1\354\103\0\1\355"+
    "\70\0\1\356\65\0\1\357\63\0\1\360\72\0\1\361"+
    "\77\0\1\362\70\0\1\363\63\0\1\364\61\0\1\365"+
    "\103\0\1\366\65\0\1\367\70\0\1\370\65\0\1\371"+
    "\77\0\1\372\63\0\1\373\70\0\1\374\74\0\1\375"+
    "\65\0\1\376\74\0\1\377\63\0\1\u0100\71\0\1\u0101"+
    "\67\0\1\u0102\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12768];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\4\1\1\11\2\1\2\11\6\1\3\11"+
    "\10\1\1\11\17\1\7\0\1\1\1\0\13\1\7\0"+
    "\2\11\12\1\7\0\12\1\7\0\11\1\7\0\7\1"+
    "\7\0\6\1\7\0\6\1\7\0\6\1\7\0\5\1"+
    "\7\0\4\1\7\0\3\1\7\0\2\1\1\11\6\0"+
    "\1\1\14\0\1\11\10\0\1\11\6\0\2\11\3\0"+
    "\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[258];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    // This adds support for nested states. I'm no JFlex pro, so maybe this is overkill, but it works quite well.
    private final java.util.LinkedList<Integer> states = new java.util.LinkedList();

    private void yypushstate(int state) {
        states.addFirst(yystate());
        yybegin(state);
    }
    private void yypopstate() {
        final int state = states.removeFirst();
        yybegin(state);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  RmsLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 33: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 34: break;
          case 3: 
            { return RmsTypes.FILENAME;
            } 
            // fall through
          case 35: break;
          case 4: 
            { return RmsTypes.CONST_NAME;
            } 
            // fall through
          case 36: break;
          case 5: 
            { return RmsTypes.INT;
            } 
            // fall through
          case 37: break;
          case 6: 
            { return RmsTypes.LEFT_BRACKET;
            } 
            // fall through
          case 38: break;
          case 7: 
            { return RmsTypes.RIGHT_BRACKET;
            } 
            // fall through
          case 39: break;
          case 8: 
            { return RmsTypes.LEFT_PARENTHESIS;
            } 
            // fall through
          case 40: break;
          case 9: 
            { return RmsTypes.RIGHT_PARENTHESIS;
            } 
            // fall through
          case 41: break;
          case 10: 
            { return RmsTypes.COMMA;
            } 
            // fall through
          case 42: break;
          case 11: 
            { yybegin(WAITING_VALUE); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 43: break;
          case 12: 
            { 
            } 
            // fall through
          case 44: break;
          case 13: 
            { return RmsTypes.COMMAND_NAME;
            } 
            // fall through
          case 45: break;
          case 14: 
            { return RmsTypes.KEYWORD_HASHMACRO;
            } 
            // fall through
          case 46: break;
          case 15: 
            { return RmsTypes.IF_STATEMENT;
            } 
            // fall through
          case 47: break;
          case 16: 
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 48: break;
          case 17: 
            { return RmsTypes.RND;
            } 
            // fall through
          case 49: break;
          case 18: 
            { yypushstate(IN_COMMENT);
            } 
            // fall through
          case 50: break;
          case 19: 
            { yypopstate(); return RmsTypes.COMMENT;
            } 
            // fall through
          case 51: break;
          case 20: 
            { return RmsTypes.ELSE_STATEMENT;
            } 
            // fall through
          case 52: break;
          case 21: 
            { return RmsTypes.ENDIF_STATEMENT;
            } 
            // fall through
          case 53: break;
          case 22: 
            { return RmsTypes.ELSEIF_STATEMENT;
            } 
            // fall through
          case 54: break;
          case 23: 
            { return RmsTypes.END_RANDOM;
            } 
            // fall through
          case 55: break;
          case 24: 
            { return RmsTypes.START_RANDOM;
            } 
            // fall through
          case 56: break;
          case 25: 
            { return RmsTypes.PERCENT_CHANCE;
            } 
            // fall through
          case 57: break;
          case 26: 
            { yybegin(IN_PLAYER_SETUP); return RmsTypes.HEADER_PLAYER_SETUP;
            } 
            // fall through
          case 58: break;
          case 27: 
            { yybegin(IN_LAND_GENERATION); return RmsTypes.HEADER_LAND_GENERATION;
            } 
            // fall through
          case 59: break;
          case 28: 
            { yybegin(IN_CLIFF_GENERATION); return RmsTypes.HEADER_CLIFF_GENERATION;
            } 
            // fall through
          case 60: break;
          case 29: 
            { yybegin(IN_TERRAIN_GENERATION); return RmsTypes.HEADER_TERRAIN_GENERATION;
            } 
            // fall through
          case 61: break;
          case 30: 
            { yybegin(IN_OBJECTS_GENERATION); return RmsTypes.HEADER_OBJECTS_GENERATION;
            } 
            // fall through
          case 62: break;
          case 31: 
            { yybegin(IN_ELEVATION_GENERATION); return RmsTypes.HEADER_ELEVATION_GENERATION;
            } 
            // fall through
          case 63: break;
          case 32: 
            { yybegin(IN_CONNECTION_GENERATION); return RmsTypes.HEADER_CONNECTION_GENERATION;
            } 
            // fall through
          case 64: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

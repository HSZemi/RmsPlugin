/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package de.hszemi.rmsplugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import de.hszemi.rmsplugin.psi.RmsTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Rms.flex</tt>
 */
class RmsLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int INITIAL = 2;
  public static final int IN_COMMENT = 4;
  public static final int IN_PLAYER_SETUP = 6;
  public static final int IN_LAND_GENERATION = 8;
  public static final int IN_ELEVATION_GENERATION = 10;
  public static final int IN_CLIFF_GENERATION = 12;
  public static final int IN_TERRAIN_GENERATION = 14;
  public static final int IN_CONNECTION_GENERATION = 16;
  public static final int IN_OBJECTS_GENERATION = 18;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  0,  0,  1,  1,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 
     2,  2,  2, 2
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\5\1\22\0\1\1\2\0\1\2\4\0\1\60\1\61\1\64\1\0\1\62\1\10\1\7\1\63\1\6\11"+
    "\11\2\0\1\33\1\0\1\45\2\0\1\36\1\56\1\54\1\47\1\40\1\55\1\50\1\4\1\51\1\57"+
    "\1\4\1\35\1\4\1\46\1\52\1\34\1\4\1\41\1\42\1\43\1\44\1\53\2\4\1\37\1\4\4\0"+
    "\1\5\1\0\1\16\1\3\1\26\1\21\1\24\1\31\1\3\1\27\1\30\2\3\1\32\1\23\1\20\1\22"+
    "\1\25\1\3\1\17\1\14\1\15\6\3\1\12\1\0\1\13\7\0\1\1\242\0\2\1\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\1\1\3\1\4\1\5\1\1"+
    "\1\5\1\6\1\7\5\3\1\1\1\10\1\11\1\12"+
    "\1\1\3\13\7\14\1\15\5\3\1\16\6\0\1\17"+
    "\1\20\5\14\1\16\1\3\1\21\3\3\7\0\1\14"+
    "\1\21\3\14\3\3\1\22\1\3\7\0\3\14\1\22"+
    "\1\14\2\3\1\23\2\3\7\0\2\14\1\23\2\14"+
    "\2\3\1\24\1\3\7\0\2\14\1\24\1\14\3\3"+
    "\7\0\3\14\3\3\7\0\3\14\3\3\7\0\3\14"+
    "\1\3\1\25\1\3\7\0\1\14\1\25\1\14\2\3"+
    "\7\0\2\14\1\26\1\3\7\0\1\26\1\14\1\3"+
    "\7\0\1\14\1\27\1\30\6\0\1\27\14\0\1\31"+
    "\10\0\1\32\6\0\1\33\1\34\3\0\1\35\1\0"+
    "\1\36";

  private static int [] zzUnpackAction() {
    int [] result = new int[248];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\237\0\u01a8\0\u01dd\0\237\0\237\0\u0212\0\u0247\0\u027c"+
    "\0\u02b1\0\u02e6\0\u031b\0\237\0\237\0\237\0\u0350\0\u0385"+
    "\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u048e\0\u04c3\0\u04f8\0\u052d"+
    "\0\u0562\0\u0109\0\u0597\0\u05cc\0\u0601\0\u0636\0\u066b\0\u013e"+
    "\0\u06a0\0\u06d5\0\u070a\0\u073f\0\u0774\0\u07a9\0\237\0\237"+
    "\0\u07de\0\u0813\0\u0848\0\u087d\0\u08b2\0\u0424\0\u08e7\0\u013e"+
    "\0\u091c\0\u0951\0\u0986\0\u09bb\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f"+
    "\0\u0ac4\0\u0af9\0\u0b2e\0\u0424\0\u0b63\0\u0b98\0\u0bcd\0\u0c02"+
    "\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b\0\u0d40\0\u0d75\0\u0daa"+
    "\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52"+
    "\0\u0f87\0\u0fbc\0\u013e\0\u0ff1\0\u1026\0\u105b\0\u1090\0\u10c5"+
    "\0\u10fa\0\u112f\0\u1164\0\u1199\0\u11ce\0\u1203\0\u0424\0\u1238"+
    "\0\u126d\0\u12a2\0\u12d7\0\u013e\0\u130c\0\u1341\0\u1376\0\u13ab"+
    "\0\u13e0\0\u1415\0\u144a\0\u147f\0\u14b4\0\u14e9\0\u0424\0\u151e"+
    "\0\u1553\0\u1588\0\u15bd\0\u15f2\0\u1627\0\u165c\0\u1691\0\u16c6"+
    "\0\u16fb\0\u1730\0\u1765\0\u179a\0\u17cf\0\u1804\0\u1839\0\u186e"+
    "\0\u18a3\0\u18d8\0\u190d\0\u1942\0\u1977\0\u19ac\0\u19e1\0\u1a16"+
    "\0\u1a4b\0\u1a80\0\u1ab5\0\u1aea\0\u1b1f\0\u1b54\0\u1b89\0\u1bbe"+
    "\0\u1bf3\0\u1c28\0\u1c5d\0\u1c92\0\u1cc7\0\u1cfc\0\u1d31\0\u1d66"+
    "\0\u013e\0\u1d9b\0\u1dd0\0\u1e05\0\u1e3a\0\u1e6f\0\u1ea4\0\u1ed9"+
    "\0\u1f0e\0\u1f43\0\u0424\0\u1f78\0\u1fad\0\u1fe2\0\u2017\0\u204c"+
    "\0\u2081\0\u20b6\0\u20eb\0\u2120\0\u2155\0\u218a\0\u21bf\0\u013e"+
    "\0\u21f4\0\u2229\0\u225e\0\u2293\0\u22c8\0\u22fd\0\u2332\0\u2367"+
    "\0\u0424\0\u239c\0\u23d1\0\u2406\0\u243b\0\u2470\0\u24a5\0\u24da"+
    "\0\u250f\0\u2544\0\u2579\0\u013e\0\237\0\u25ae\0\u25e3\0\u2618"+
    "\0\u264d\0\u2682\0\u26b7\0\u0424\0\u26ec\0\u2721\0\u2756\0\u278b"+
    "\0\u27c0\0\u27f5\0\u282a\0\u285f\0\u2894\0\u28c9\0\u28fe\0\u2933"+
    "\0\237\0\u2968\0\u299d\0\u29d2\0\u2a07\0\u2a3c\0\u2a71\0\u2aa6"+
    "\0\u2adb\0\237\0\u2b10\0\u2b45\0\u2b7a\0\u2baf\0\u2be4\0\u2c19"+
    "\0\237\0\237\0\u2c4e\0\u2c83\0\u2cb8\0\237\0\u2ced\0\237";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[248];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\2\10\1\11\1\7\1\12"+
    "\1\13\1\14\1\15\1\16\2\7\1\17\4\7\1\20"+
    "\1\21\2\7\1\22\2\7\1\23\11\10\1\4\12\10"+
    "\1\24\1\25\1\26\1\27\1\4\63\30\1\31\1\32"+
    "\1\4\1\5\1\6\1\33\1\10\1\34\1\11\1\7"+
    "\1\12\1\13\1\14\1\15\1\35\2\33\1\36\4\33"+
    "\1\37\1\40\2\33\1\41\2\33\1\23\11\10\1\4"+
    "\12\10\1\24\1\25\1\26\1\27\1\4\66\0\1\5"+
    "\66\0\1\42\1\0\1\42\6\0\17\42\35\0\5\7"+
    "\1\0\1\7\2\0\17\7\1\0\11\7\1\0\12\7"+
    "\10\0\1\7\3\10\1\7\1\0\1\10\2\0\17\7"+
    "\1\0\11\10\1\0\12\10\16\0\1\13\61\0\1\13"+
    "\2\0\1\13\56\0\5\7\1\0\1\7\2\0\1\7"+
    "\1\43\15\7\1\0\11\7\1\0\12\7\10\0\5\7"+
    "\1\0\1\7\2\0\4\7\1\44\12\7\1\0\11\7"+
    "\1\0\12\7\10\0\5\7\1\0\1\7\2\0\4\7"+
    "\1\45\11\7\1\46\1\0\11\7\1\0\12\7\10\0"+
    "\5\7\1\0\1\7\2\0\10\7\1\47\6\7\1\0"+
    "\11\7\1\0\12\7\10\0\5\7\1\0\1\7\2\0"+
    "\15\7\1\50\1\7\1\0\11\7\1\0\12\7\41\0"+
    "\1\51\1\52\2\0\1\53\2\0\1\54\6\0\1\55"+
    "\1\0\1\56\74\0\1\57\64\30\1\0\64\30\1\57"+
    "\63\0\1\60\4\0\1\33\1\7\2\33\1\7\1\0"+
    "\1\33\2\0\17\33\1\0\11\7\1\0\12\7\10\0"+
    "\1\33\1\10\2\34\1\7\1\0\1\34\2\0\17\33"+
    "\1\0\11\10\1\0\12\10\10\0\1\33\1\7\2\33"+
    "\1\7\1\0\1\33\2\0\1\33\1\61\15\33\1\0"+
    "\11\7\1\0\12\7\10\0\1\33\1\7\2\33\1\7"+
    "\1\0\1\33\2\0\4\33\1\62\12\33\1\0\11\7"+
    "\1\0\12\7\10\0\1\33\1\7\2\33\1\7\1\0"+
    "\1\33\2\0\4\33\1\63\11\33\1\64\1\0\11\7"+
    "\1\0\12\7\10\0\1\33\1\7\2\33\1\7\1\0"+
    "\1\33\2\0\10\33\1\65\6\33\1\0\11\7\1\0"+
    "\12\7\10\0\1\33\1\7\2\33\1\7\1\0\1\33"+
    "\2\0\15\33\1\66\1\33\1\0\11\7\1\0\12\7"+
    "\10\0\5\7\1\0\1\7\2\0\2\7\1\67\14\7"+
    "\1\0\11\7\1\0\12\7\10\0\5\7\1\0\1\7"+
    "\2\0\5\7\1\70\11\7\1\0\11\7\1\0\12\7"+
    "\10\0\5\7\1\0\1\7\2\0\5\7\1\71\11\7"+
    "\1\0\11\7\1\0\12\7\10\0\5\7\1\0\1\7"+
    "\2\0\1\72\16\7\1\0\11\7\1\0\12\7\10\0"+
    "\5\7\1\0\1\7\2\0\3\7\1\73\13\7\1\0"+
    "\11\7\1\0\12\7\42\0\1\74\65\0\1\75\63\0"+
    "\1\76\67\0\1\77\102\0\1\100\43\0\1\101\14\0"+
    "\1\102\15\0\1\33\1\7\2\33\1\7\1\0\1\33"+
    "\2\0\2\33\1\103\14\33\1\0\11\7\1\0\12\7"+
    "\10\0\1\33\1\7\2\33\1\7\1\0\1\33\2\0"+
    "\5\33\1\104\11\33\1\0\11\7\1\0\12\7\10\0"+
    "\1\33\1\7\2\33\1\7\1\0\1\33\2\0\5\33"+
    "\1\105\11\33\1\0\11\7\1\0\12\7\10\0\1\33"+
    "\1\7\2\33\1\7\1\0\1\33\2\0\1\106\16\33"+
    "\1\0\11\7\1\0\12\7\10\0\1\33\1\7\2\33"+
    "\1\7\1\0\1\33\2\0\3\33\1\107\13\33\1\0"+
    "\11\7\1\0\12\7\10\0\5\7\1\0\1\7\2\0"+
    "\3\7\1\110\13\7\1\0\11\7\1\0\12\7\10\0"+
    "\2\7\1\111\2\7\1\0\1\7\2\0\14\7\1\112"+
    "\2\7\1\0\11\7\1\0\12\7\10\0\5\7\1\0"+
    "\1\7\2\0\10\7\1\113\6\7\1\0\11\7\1\0"+
    "\12\7\10\0\5\7\1\0\1\7\2\0\12\7\1\114"+
    "\4\7\1\0\11\7\1\0\12\7\43\0\1\115\74\0"+
    "\1\116\56\0\1\117\65\0\1\120\102\0\1\121\56\0"+
    "\1\122\61\0\1\123\21\0\1\33\1\7\2\33\1\7"+
    "\1\0\1\33\2\0\3\33\1\124\13\33\1\0\11\7"+
    "\1\0\12\7\10\0\1\33\1\7\1\125\1\33\1\7"+
    "\1\0\1\33\2\0\14\33\1\126\2\33\1\0\11\7"+
    "\1\0\12\7\10\0\1\33\1\7\2\33\1\7\1\0"+
    "\1\33\2\0\10\33\1\127\6\33\1\0\11\7\1\0"+
    "\12\7\10\0\1\33\1\7\2\33\1\7\1\0\1\33"+
    "\2\0\12\33\1\130\4\33\1\0\11\7\1\0\12\7"+
    "\10\0\5\7\1\0\1\7\2\0\1\7\1\131\15\7"+
    "\1\0\11\7\1\0\12\7\10\0\5\7\1\0\1\7"+
    "\2\0\3\7\1\132\13\7\1\0\11\7\1\0\12\7"+
    "\10\0\5\7\1\0\1\7\2\0\15\7\1\133\1\7"+
    "\1\0\11\7\1\0\12\7\10\0\5\7\1\0\1\7"+
    "\2\0\14\7\1\134\2\7\1\0\11\7\1\0\12\7"+
    "\10\0\5\7\1\0\1\7\2\0\10\7\1\135\6\7"+
    "\1\0\11\7\1\0\12\7\44\0\1\136\74\0\1\137"+
    "\70\0\1\140\52\0\1\141\63\0\1\142\101\0\1\143"+
    "\55\0\1\144\21\0\1\33\1\7\2\33\1\7\1\0"+
    "\1\33\2\0\1\33\1\145\15\33\1\0\11\7\1\0"+
    "\12\7\10\0\1\33\1\7\2\33\1\7\1\0\1\33"+
    "\2\0\3\33\1\146\13\33\1\0\11\7\1\0\12\7"+
    "\10\0\1\33\1\7\2\33\1\7\1\0\1\33\2\0"+
    "\15\33\1\147\1\33\1\0\11\7\1\0\12\7\10\0"+
    "\1\33\1\7\2\33\1\7\1\0\1\33\2\0\14\33"+
    "\1\150\2\33\1\0\11\7\1\0\12\7\10\0\1\33"+
    "\1\7\2\33\1\7\1\0\1\33\2\0\10\33\1\151"+
    "\6\33\1\0\11\7\1\0\12\7\10\0\2\7\1\152"+
    "\2\7\1\0\1\7\2\0\17\7\1\0\11\7\1\0"+
    "\12\7\10\0\5\7\1\0\1\7\2\0\2\7\1\153"+
    "\14\7\1\0\11\7\1\0\12\7\10\0\5\7\1\0"+
    "\1\7\2\0\15\7\1\154\1\7\1\0\11\7\1\0"+
    "\12\7\10\0\5\7\1\0\1\7\2\0\4\7\1\155"+
    "\12\7\1\0\11\7\1\0\12\7\45\0\1\156\31\0"+
    "\1\157\115\0\1\160\64\0\1\161\102\0\1\162\65\0"+
    "\1\163\47\0\1\164\27\0\1\33\1\7\1\165\1\33"+
    "\1\7\1\0\1\33\2\0\17\33\1\0\11\7\1\0"+
    "\12\7\10\0\1\33\1\7\2\33\1\7\1\0\1\33"+
    "\2\0\2\33\1\166\14\33\1\0\11\7\1\0\12\7"+
    "\10\0\1\33\1\7\2\33\1\7\1\0\1\33\2\0"+
    "\15\33\1\167\1\33\1\0\11\7\1\0\12\7\10\0"+
    "\1\33\1\7\2\33\1\7\1\0\1\33\2\0\4\33"+
    "\1\170\12\33\1\0\11\7\1\0\12\7\10\0\5\7"+
    "\1\0\1\7\2\0\3\7\1\171\13\7\1\0\11\7"+
    "\1\0\12\7\10\0\5\7\1\0\1\7\2\0\4\7"+
    "\1\172\12\7\1\0\11\7\1\0\12\7\10\0\5\7"+
    "\1\0\1\7\2\0\1\7\1\173\15\7\1\0\11\7"+
    "\1\0\12\7\46\0\1\174\73\0\1\175\57\0\1\176"+
    "\72\0\1\177\56\0\1\200\26\0\1\201\133\0\1\202"+
    "\13\0\1\33\1\7\2\33\1\7\1\0\1\33\2\0"+
    "\3\33\1\203\13\33\1\0\11\7\1\0\12\7\10\0"+
    "\1\33\1\7\2\33\1\7\1\0\1\33\2\0\4\33"+
    "\1\204\12\33\1\0\11\7\1\0\12\7\10\0\1\33"+
    "\1\7\2\33\1\7\1\0\1\33\2\0\1\33\1\205"+
    "\15\33\1\0\11\7\1\0\12\7\10\0\5\7\1\0"+
    "\1\7\2\0\2\7\1\206\14\7\1\0\11\7\1\0"+
    "\12\7\10\0\5\7\1\0\1\7\2\0\5\7\1\207"+
    "\11\7\1\0\11\7\1\0\12\7\10\0\2\7\1\210"+
    "\2\7\1\0\1\7\2\0\17\7\1\0\11\7\1\0"+
    "\12\7\12\0\1\211\117\0\1\212\75\0\1\213\61\0"+
    "\1\214\60\0\1\215\72\0\1\216\57\0\1\217\24\0"+
    "\1\33\1\7\2\33\1\7\1\0\1\33\2\0\2\33"+
    "\1\220\14\33\1\0\11\7\1\0\12\7\10\0\1\33"+
    "\1\7\2\33\1\7\1\0\1\33\2\0\5\33\1\221"+
    "\11\33\1\0\11\7\1\0\12\7\10\0\1\33\1\7"+
    "\1\222\1\33\1\7\1\0\1\33\2\0\17\33\1\0"+
    "\11\7\1\0\12\7\10\0\5\7\1\0\1\7\2\0"+
    "\4\7\1\223\12\7\1\0\11\7\1\0\12\7\10\0"+
    "\5\7\1\0\1\7\2\0\6\7\1\224\10\7\1\0"+
    "\11\7\1\0\12\7\10\0\5\7\1\0\1\7\2\0"+
    "\12\7\1\225\4\7\1\0\11\7\1\0\12\7\47\0"+
    "\1\226\70\0\1\227\70\0\1\230\17\0\1\231\64\0"+
    "\1\232\117\0\1\233\75\0\1\234\16\0\1\33\1\7"+
    "\2\33\1\7\1\0\1\33\2\0\4\33\1\235\12\33"+
    "\1\0\11\7\1\0\12\7\10\0\1\33\1\7\2\33"+
    "\1\7\1\0\1\33\2\0\6\33\1\236\10\33\1\0"+
    "\11\7\1\0\12\7\10\0\1\33\1\7\2\33\1\7"+
    "\1\0\1\33\2\0\12\33\1\237\4\33\1\0\11\7"+
    "\1\0\12\7\10\0\5\7\1\0\1\7\2\0\5\7"+
    "\1\240\11\7\1\0\11\7\1\0\12\7\10\0\5\7"+
    "\1\0\1\7\2\0\7\7\1\241\7\7\1\0\11\7"+
    "\1\0\12\7\10\0\5\7\1\0\1\7\2\0\13\7"+
    "\1\242\3\7\1\0\11\7\1\0\12\7\45\0\1\243"+
    "\64\0\1\244\72\0\1\245\66\0\1\246\64\0\1\247"+
    "\62\0\1\250\70\0\1\251\15\0\1\33\1\7\2\33"+
    "\1\7\1\0\1\33\2\0\5\33\1\252\11\33\1\0"+
    "\11\7\1\0\12\7\10\0\1\33\1\7\2\33\1\7"+
    "\1\0\1\33\2\0\7\33\1\253\7\33\1\0\11\7"+
    "\1\0\12\7\10\0\1\33\1\7\2\33\1\7\1\0"+
    "\1\33\2\0\13\33\1\254\3\33\1\0\11\7\1\0"+
    "\12\7\10\0\5\7\1\0\1\7\2\0\6\7\1\255"+
    "\10\7\1\0\11\7\1\0\12\7\10\0\5\7\1\0"+
    "\1\7\2\0\2\7\1\256\14\7\1\0\11\7\1\0"+
    "\12\7\50\0\1\257\62\0\1\260\30\0\1\261\117\0"+
    "\1\262\64\0\1\263\64\0\1\264\72\0\1\265\21\0"+
    "\1\33\1\7\2\33\1\7\1\0\1\33\2\0\6\33"+
    "\1\266\10\33\1\0\11\7\1\0\12\7\10\0\1\33"+
    "\1\7\2\33\1\7\1\0\1\33\2\0\2\33\1\267"+
    "\14\33\1\0\11\7\1\0\12\7\10\0\5\7\1\0"+
    "\1\7\2\0\7\7\1\270\7\7\1\0\11\7\1\0"+
    "\12\7\10\0\5\7\1\0\1\7\2\0\4\7\1\271"+
    "\12\7\1\0\11\7\1\0\12\7\51\0\1\272\56\0"+
    "\1\273\76\0\1\274\62\0\1\275\64\0\1\276\57\0"+
    "\1\277\30\0\1\300\62\0\1\33\1\7\2\33\1\7"+
    "\1\0\1\33\2\0\7\33\1\301\7\33\1\0\11\7"+
    "\1\0\12\7\10\0\1\33\1\7\2\33\1\7\1\0"+
    "\1\33\2\0\4\33\1\302\12\33\1\0\11\7\1\0"+
    "\12\7\10\0\5\7\1\0\1\7\2\0\12\7\1\303"+
    "\4\7\1\0\11\7\1\0\12\7\41\0\1\304\73\0"+
    "\1\305\61\0\1\306\64\0\1\307\64\0\1\310\62\0"+
    "\1\311\76\0\1\312\17\0\1\33\1\7\2\33\1\7"+
    "\1\0\1\33\2\0\12\33\1\313\4\33\1\0\11\7"+
    "\1\0\12\7\10\0\5\7\1\0\1\7\2\0\10\7"+
    "\1\314\6\7\1\0\11\7\1\0\12\7\52\0\1\315"+
    "\70\0\1\316\61\0\1\317\57\0\1\320\64\0\1\321"+
    "\66\0\1\322\61\0\1\323\27\0\1\33\1\7\2\33"+
    "\1\7\1\0\1\33\2\0\10\33\1\324\6\33\1\0"+
    "\11\7\1\0\12\7\57\0\1\325\52\0\1\326\62\0"+
    "\1\327\64\0\1\330\77\0\1\331\61\0\1\332\64\0"+
    "\1\333\57\0\1\334\66\0\1\335\64\0\1\336\73\0"+
    "\1\337\52\0\1\340\71\0\1\341\55\0\1\342\77\0"+
    "\1\343\64\0\1\344\61\0\1\345\57\0\1\346\66\0"+
    "\1\347\73\0\1\350\64\0\1\351\57\0\1\352\55\0"+
    "\1\353\77\0\1\354\61\0\1\355\64\0\1\356\61\0"+
    "\1\357\73\0\1\360\57\0\1\361\64\0\1\362\70\0"+
    "\1\363\61\0\1\364\70\0\1\365\57\0\1\366\65\0"+
    "\1\367\63\0\1\370\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11554];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\4\1\1\11\2\1\2\11\6\1\3\11"+
    "\22\1\6\0\2\11\13\1\7\0\12\1\7\0\12\1"+
    "\7\0\11\1\7\0\7\1\7\0\6\1\7\0\6\1"+
    "\7\0\6\1\7\0\5\1\7\0\4\1\7\0\3\1"+
    "\7\0\2\1\1\11\6\0\1\1\14\0\1\11\10\0"+
    "\1\11\6\0\2\11\3\0\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[248];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    // This adds support for nested states. I'm no JFlex pro, so maybe this is overkill, but it works quite well.
    private final java.util.LinkedList<Integer> states = new java.util.LinkedList();

    private void yypushstate(int state) {
        states.addFirst(yystate());
        yybegin(state);
    }
    private void yypopstate() {
        final int state = states.removeFirst();
        yybegin(state);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  RmsLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 31: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 32: break;
          case 3: 
            { return RmsTypes.FILENAME;
            } 
            // fall through
          case 33: break;
          case 4: 
            { return RmsTypes.CONST_NAME;
            } 
            // fall through
          case 34: break;
          case 5: 
            { return RmsTypes.INT;
            } 
            // fall through
          case 35: break;
          case 6: 
            { return RmsTypes.LEFT_BRACKET;
            } 
            // fall through
          case 36: break;
          case 7: 
            { return RmsTypes.RIGHT_BRACKET;
            } 
            // fall through
          case 37: break;
          case 8: 
            { return RmsTypes.LEFT_PARENTHESIS;
            } 
            // fall through
          case 38: break;
          case 9: 
            { return RmsTypes.RIGHT_PARENTHESIS;
            } 
            // fall through
          case 39: break;
          case 10: 
            { return RmsTypes.COMMA;
            } 
            // fall through
          case 40: break;
          case 11: 
            { 
            } 
            // fall through
          case 41: break;
          case 12: 
            { return RmsTypes.COMMAND_NAME;
            } 
            // fall through
          case 42: break;
          case 13: 
            { return RmsTypes.KEYWORD_HASHMACRO;
            } 
            // fall through
          case 43: break;
          case 14: 
            { return RmsTypes.IF_STATEMENT;
            } 
            // fall through
          case 44: break;
          case 15: 
            { yypushstate(IN_COMMENT);
            } 
            // fall through
          case 45: break;
          case 16: 
            { yypopstate(); return RmsTypes.COMMENT;
            } 
            // fall through
          case 46: break;
          case 17: 
            { return RmsTypes.RND;
            } 
            // fall through
          case 47: break;
          case 18: 
            { return RmsTypes.ELSE_STATEMENT;
            } 
            // fall through
          case 48: break;
          case 19: 
            { return RmsTypes.ENDIF_STATEMENT;
            } 
            // fall through
          case 49: break;
          case 20: 
            { return RmsTypes.ELSEIF_STATEMENT;
            } 
            // fall through
          case 50: break;
          case 21: 
            { return RmsTypes.END_RANDOM;
            } 
            // fall through
          case 51: break;
          case 22: 
            { return RmsTypes.START_RANDOM;
            } 
            // fall through
          case 52: break;
          case 23: 
            { return RmsTypes.PERCENT_CHANCE;
            } 
            // fall through
          case 53: break;
          case 24: 
            { yybegin(IN_PLAYER_SETUP); return RmsTypes.HEADER_PLAYER_SETUP;
            } 
            // fall through
          case 54: break;
          case 25: 
            { yybegin(IN_LAND_GENERATION); return RmsTypes.HEADER_LAND_GENERATION;
            } 
            // fall through
          case 55: break;
          case 26: 
            { yybegin(IN_CLIFF_GENERATION); return RmsTypes.HEADER_CLIFF_GENERATION;
            } 
            // fall through
          case 56: break;
          case 27: 
            { yybegin(IN_TERRAIN_GENERATION); return RmsTypes.HEADER_TERRAIN_GENERATION;
            } 
            // fall through
          case 57: break;
          case 28: 
            { yybegin(IN_OBJECTS_GENERATION); return RmsTypes.HEADER_OBJECTS_GENERATION;
            } 
            // fall through
          case 58: break;
          case 29: 
            { yybegin(IN_ELEVATION_GENERATION); return RmsTypes.HEADER_ELEVATION_GENERATION;
            } 
            // fall through
          case 59: break;
          case 30: 
            { yybegin(IN_CONNECTION_GENERATION); return RmsTypes.HEADER_CONNECTION_GENERATION;
            } 
            // fall through
          case 60: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

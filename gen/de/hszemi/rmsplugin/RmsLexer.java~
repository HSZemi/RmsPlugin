/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package de.hszemi.rmsplugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import de.hszemi.rmsplugin.psi.RmsTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Rms.flex</tt>
 */
class RmsLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int INITIAL = 2;
  public static final int IN_COMMENT = 4;
  public static final int IN_PLAYER_SETUP = 6;
  public static final int IN_LAND_GENERATION = 8;
  public static final int IN_ELEVATION_GENERATION = 10;
  public static final int IN_CLIFF_GENERATION = 12;
  public static final int IN_TERRAIN_GENERATION = 14;
  public static final int IN_CONNECTION_GENERATION = 16;
  public static final int IN_OBJECTS_GENERATION = 18;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  0,  0,  1,  1,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 
     2,  2,  2, 2
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\5\1\22\0\1\65\2\0\1\2\4\0\1\60\1\61\1\64\1\0\1\62\1\10\1\7\1\63\1\6"+
    "\11\11\2\0\1\33\1\0\1\45\2\0\1\36\1\56\1\54\1\47\1\40\1\55\1\50\1\4\1\51\1"+
    "\57\1\4\1\35\1\4\1\46\1\52\1\34\1\4\1\41\1\42\1\43\1\44\1\53\2\4\1\37\1\4"+
    "\4\0\1\5\1\0\1\16\1\3\1\26\1\21\1\24\1\31\1\3\1\27\1\30\2\3\1\32\1\23\1\20"+
    "\1\22\1\25\1\3\1\17\1\14\1\15\6\3\1\12\1\0\1\13\7\0\1\1\242\0\2\1\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\1\1\3\1\4\1\5\1\1"+
    "\1\5\1\6\1\7\5\3\1\1\1\10\1\11\1\12"+
    "\1\1\5\13\7\14\1\15\5\3\1\16\6\0\2\17"+
    "\1\20\5\14\1\16\1\3\1\21\3\3\7\0\1\14"+
    "\1\21\3\14\3\3\1\22\1\3\7\0\3\14\1\22"+
    "\1\14\2\3\1\23\2\3\7\0\2\14\1\23\2\14"+
    "\2\3\1\24\1\3\7\0\2\14\1\24\1\14\3\3"+
    "\7\0\3\14\3\3\7\0\3\14\3\3\7\0\3\14"+
    "\1\3\1\25\1\3\7\0\1\14\1\25\1\14\2\3"+
    "\7\0\2\14\1\26\1\3\7\0\1\26\1\14\1\3"+
    "\7\0\1\14\1\27\1\30\6\0\1\27\14\0\1\31"+
    "\10\0\1\32\6\0\1\33\1\34\3\0\1\35\1\0"+
    "\1\36";

  private static int [] zzUnpackAction() {
    int [] result = new int[251];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u017a"+
    "\0\242\0\u01b0\0\u01e6\0\242\0\242\0\u021c\0\u0252\0\u0288"+
    "\0\u02be\0\u02f4\0\u032a\0\242\0\242\0\242\0\u0360\0\u0396"+
    "\0\u03cc\0\u0402\0\u0438\0\330\0\u046e\0\u04a4\0\u04da\0\u0510"+
    "\0\u0546\0\u057c\0\u05b2\0\u010e\0\u05e8\0\u061e\0\u0654\0\u068a"+
    "\0\u06c0\0\u0144\0\u06f6\0\u072c\0\u0762\0\u0798\0\u07ce\0\u0804"+
    "\0\242\0\u0396\0\u0396\0\u083a\0\u0870\0\u08a6\0\u08dc\0\u0912"+
    "\0\u046e\0\u0948\0\u0144\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u0a56"+
    "\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a\0\u046e\0\u0bd0"+
    "\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a\0\u0d80"+
    "\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30"+
    "\0\u0f66\0\u0f9c\0\u0fd2\0\u1008\0\u103e\0\u0144\0\u1074\0\u10aa"+
    "\0\u10e0\0\u1116\0\u114c\0\u1182\0\u11b8\0\u11ee\0\u1224\0\u125a"+
    "\0\u1290\0\u046e\0\u12c6\0\u12fc\0\u1332\0\u1368\0\u0144\0\u139e"+
    "\0\u13d4\0\u140a\0\u1440\0\u1476\0\u14ac\0\u14e2\0\u1518\0\u154e"+
    "\0\u1584\0\u046e\0\u15ba\0\u15f0\0\u1626\0\u165c\0\u1692\0\u16c8"+
    "\0\u16fe\0\u1734\0\u176a\0\u17a0\0\u17d6\0\u180c\0\u1842\0\u1878"+
    "\0\u18ae\0\u18e4\0\u191a\0\u1950\0\u1986\0\u19bc\0\u19f2\0\u1a28"+
    "\0\u1a5e\0\u1a94\0\u1aca\0\u1b00\0\u1b36\0\u1b6c\0\u1ba2\0\u1bd8"+
    "\0\u1c0e\0\u1c44\0\u1c7a\0\u1cb0\0\u1ce6\0\u1d1c\0\u1d52\0\u1d88"+
    "\0\u1dbe\0\u1df4\0\u1e2a\0\u0144\0\u1e60\0\u1e96\0\u1ecc\0\u1f02"+
    "\0\u1f38\0\u1f6e\0\u1fa4\0\u1fda\0\u2010\0\u046e\0\u2046\0\u207c"+
    "\0\u20b2\0\u20e8\0\u211e\0\u2154\0\u218a\0\u21c0\0\u21f6\0\u222c"+
    "\0\u2262\0\u2298\0\u0144\0\u22ce\0\u2304\0\u233a\0\u2370\0\u23a6"+
    "\0\u23dc\0\u2412\0\u2448\0\u046e\0\u247e\0\u24b4\0\u24ea\0\u2520"+
    "\0\u2556\0\u258c\0\u25c2\0\u25f8\0\u262e\0\u2664\0\u0144\0\242"+
    "\0\u269a\0\u26d0\0\u2706\0\u273c\0\u2772\0\u27a8\0\u046e\0\u27de"+
    "\0\u2814\0\u284a\0\u2880\0\u28b6\0\u28ec\0\u2922\0\u2958\0\u298e"+
    "\0\u29c4\0\u29fa\0\u2a30\0\242\0\u2a66\0\u2a9c\0\u2ad2\0\u2b08"+
    "\0\u2b3e\0\u2b74\0\u2baa\0\u2be0\0\242\0\u2c16\0\u2c4c\0\u2c82"+
    "\0\u2cb8\0\u2cee\0\u2d24\0\242\0\242\0\u2d5a\0\u2d90\0\u2dc6"+
    "\0\242\0\u2dfc\0\242";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[251];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\2\10\1\11\1\7\1\12"+
    "\1\13\1\14\1\15\1\16\2\7\1\17\4\7\1\20"+
    "\1\21\2\7\1\22\2\7\1\23\11\10\1\4\12\10"+
    "\1\24\1\25\1\26\1\27\1\4\1\5\1\30\1\31"+
    "\61\30\1\32\1\33\1\34\1\4\1\5\1\6\1\35"+
    "\1\10\1\36\1\11\1\7\1\12\1\13\1\14\1\15"+
    "\1\37\2\35\1\40\4\35\1\41\1\42\2\35\1\43"+
    "\2\35\1\23\11\10\1\4\12\10\1\24\1\25\1\26"+
    "\1\27\1\4\1\5\67\0\1\5\63\0\1\5\3\0"+
    "\1\44\1\0\1\44\6\0\17\44\36\0\5\7\1\0"+
    "\1\7\2\0\17\7\1\0\11\7\1\0\12\7\11\0"+
    "\1\7\3\10\1\7\1\0\1\10\2\0\17\7\1\0"+
    "\11\10\1\0\12\10\17\0\1\13\62\0\1\13\2\0"+
    "\1\13\57\0\5\7\1\0\1\7\2\0\1\7\1\45"+
    "\15\7\1\0\11\7\1\0\12\7\11\0\5\7\1\0"+
    "\1\7\2\0\4\7\1\46\12\7\1\0\11\7\1\0"+
    "\12\7\11\0\5\7\1\0\1\7\2\0\4\7\1\47"+
    "\11\7\1\50\1\0\11\7\1\0\12\7\11\0\5\7"+
    "\1\0\1\7\2\0\10\7\1\51\6\7\1\0\11\7"+
    "\1\0\12\7\11\0\5\7\1\0\1\7\2\0\15\7"+
    "\1\52\1\7\1\0\11\7\1\0\12\7\42\0\1\53"+
    "\1\54\2\0\1\55\2\0\1\56\6\0\1\57\1\0"+
    "\1\60\75\0\1\61\1\0\65\30\1\0\1\30\1\31"+
    "\63\30\1\5\64\30\1\62\1\0\63\30\1\63\1\30"+
    "\4\0\1\35\1\7\2\35\1\7\1\0\1\35\2\0"+
    "\17\35\1\0\11\7\1\0\12\7\11\0\1\35\1\10"+
    "\2\36\1\7\1\0\1\36\2\0\17\35\1\0\11\10"+
    "\1\0\12\10\11\0\1\35\1\7\2\35\1\7\1\0"+
    "\1\35\2\0\1\35\1\64\15\35\1\0\11\7\1\0"+
    "\12\7\11\0\1\35\1\7\2\35\1\7\1\0\1\35"+
    "\2\0\4\35\1\65\12\35\1\0\11\7\1\0\12\7"+
    "\11\0\1\35\1\7\2\35\1\7\1\0\1\35\2\0"+
    "\4\35\1\66\11\35\1\67\1\0\11\7\1\0\12\7"+
    "\11\0\1\35\1\7\2\35\1\7\1\0\1\35\2\0"+
    "\10\35\1\70\6\35\1\0\11\7\1\0\12\7\11\0"+
    "\1\35\1\7\2\35\1\7\1\0\1\35\2\0\15\35"+
    "\1\71\1\35\1\0\11\7\1\0\12\7\11\0\5\7"+
    "\1\0\1\7\2\0\2\7\1\72\14\7\1\0\11\7"+
    "\1\0\12\7\11\0\5\7\1\0\1\7\2\0\5\7"+
    "\1\73\11\7\1\0\11\7\1\0\12\7\11\0\5\7"+
    "\1\0\1\7\2\0\5\7\1\74\11\7\1\0\11\7"+
    "\1\0\12\7\11\0\5\7\1\0\1\7\2\0\1\75"+
    "\16\7\1\0\11\7\1\0\12\7\11\0\5\7\1\0"+
    "\1\7\2\0\3\7\1\76\13\7\1\0\11\7\1\0"+
    "\12\7\43\0\1\77\66\0\1\100\64\0\1\101\70\0"+
    "\1\102\103\0\1\103\44\0\1\104\14\0\1\105\16\0"+
    "\1\35\1\7\2\35\1\7\1\0\1\35\2\0\2\35"+
    "\1\106\14\35\1\0\11\7\1\0\12\7\11\0\1\35"+
    "\1\7\2\35\1\7\1\0\1\35\2\0\5\35\1\107"+
    "\11\35\1\0\11\7\1\0\12\7\11\0\1\35\1\7"+
    "\2\35\1\7\1\0\1\35\2\0\5\35\1\110\11\35"+
    "\1\0\11\7\1\0\12\7\11\0\1\35\1\7\2\35"+
    "\1\7\1\0\1\35\2\0\1\111\16\35\1\0\11\7"+
    "\1\0\12\7\11\0\1\35\1\7\2\35\1\7\1\0"+
    "\1\35\2\0\3\35\1\112\13\35\1\0\11\7\1\0"+
    "\12\7\11\0\5\7\1\0\1\7\2\0\3\7\1\113"+
    "\13\7\1\0\11\7\1\0\12\7\11\0\2\7\1\114"+
    "\2\7\1\0\1\7\2\0\14\7\1\115\2\7\1\0"+
    "\11\7\1\0\12\7\11\0\5\7\1\0\1\7\2\0"+
    "\10\7\1\116\6\7\1\0\11\7\1\0\12\7\11\0"+
    "\5\7\1\0\1\7\2\0\12\7\1\117\4\7\1\0"+
    "\11\7\1\0\12\7\44\0\1\120\75\0\1\121\57\0"+
    "\1\122\66\0\1\123\103\0\1\124\57\0\1\125\62\0"+
    "\1\126\22\0\1\35\1\7\2\35\1\7\1\0\1\35"+
    "\2\0\3\35\1\127\13\35\1\0\11\7\1\0\12\7"+
    "\11\0\1\35\1\7\1\130\1\35\1\7\1\0\1\35"+
    "\2\0\14\35\1\131\2\35\1\0\11\7\1\0\12\7"+
    "\11\0\1\35\1\7\2\35\1\7\1\0\1\35\2\0"+
    "\10\35\1\132\6\35\1\0\11\7\1\0\12\7\11\0"+
    "\1\35\1\7\2\35\1\7\1\0\1\35\2\0\12\35"+
    "\1\133\4\35\1\0\11\7\1\0\12\7\11\0\5\7"+
    "\1\0\1\7\2\0\1\7\1\134\15\7\1\0\11\7"+
    "\1\0\12\7\11\0\5\7\1\0\1\7\2\0\3\7"+
    "\1\135\13\7\1\0\11\7\1\0\12\7\11\0\5\7"+
    "\1\0\1\7\2\0\15\7\1\136\1\7\1\0\11\7"+
    "\1\0\12\7\11\0\5\7\1\0\1\7\2\0\14\7"+
    "\1\137\2\7\1\0\11\7\1\0\12\7\11\0\5\7"+
    "\1\0\1\7\2\0\10\7\1\140\6\7\1\0\11\7"+
    "\1\0\12\7\45\0\1\141\75\0\1\142\71\0\1\143"+
    "\53\0\1\144\64\0\1\145\102\0\1\146\56\0\1\147"+
    "\22\0\1\35\1\7\2\35\1\7\1\0\1\35\2\0"+
    "\1\35\1\150\15\35\1\0\11\7\1\0\12\7\11\0"+
    "\1\35\1\7\2\35\1\7\1\0\1\35\2\0\3\35"+
    "\1\151\13\35\1\0\11\7\1\0\12\7\11\0\1\35"+
    "\1\7\2\35\1\7\1\0\1\35\2\0\15\35\1\152"+
    "\1\35\1\0\11\7\1\0\12\7\11\0\1\35\1\7"+
    "\2\35\1\7\1\0\1\35\2\0\14\35\1\153\2\35"+
    "\1\0\11\7\1\0\12\7\11\0\1\35\1\7\2\35"+
    "\1\7\1\0\1\35\2\0\10\35\1\154\6\35\1\0"+
    "\11\7\1\0\12\7\11\0\2\7\1\155\2\7\1\0"+
    "\1\7\2\0\17\7\1\0\11\7\1\0\12\7\11\0"+
    "\5\7\1\0\1\7\2\0\2\7\1\156\14\7\1\0"+
    "\11\7\1\0\12\7\11\0\5\7\1\0\1\7\2\0"+
    "\15\7\1\157\1\7\1\0\11\7\1\0\12\7\11\0"+
    "\5\7\1\0\1\7\2\0\4\7\1\160\12\7\1\0"+
    "\11\7\1\0\12\7\46\0\1\161\32\0\1\162\116\0"+
    "\1\163\65\0\1\164\103\0\1\165\66\0\1\166\50\0"+
    "\1\167\30\0\1\35\1\7\1\170\1\35\1\7\1\0"+
    "\1\35\2\0\17\35\1\0\11\7\1\0\12\7\11\0"+
    "\1\35\1\7\2\35\1\7\1\0\1\35\2\0\2\35"+
    "\1\171\14\35\1\0\11\7\1\0\12\7\11\0\1\35"+
    "\1\7\2\35\1\7\1\0\1\35\2\0\15\35\1\172"+
    "\1\35\1\0\11\7\1\0\12\7\11\0\1\35\1\7"+
    "\2\35\1\7\1\0\1\35\2\0\4\35\1\173\12\35"+
    "\1\0\11\7\1\0\12\7\11\0\5\7\1\0\1\7"+
    "\2\0\3\7\1\174\13\7\1\0\11\7\1\0\12\7"+
    "\11\0\5\7\1\0\1\7\2\0\4\7\1\175\12\7"+
    "\1\0\11\7\1\0\12\7\11\0\5\7\1\0\1\7"+
    "\2\0\1\7\1\176\15\7\1\0\11\7\1\0\12\7"+
    "\47\0\1\177\74\0\1\200\60\0\1\201\73\0\1\202"+
    "\57\0\1\203\27\0\1\204\134\0\1\205\14\0\1\35"+
    "\1\7\2\35\1\7\1\0\1\35\2\0\3\35\1\206"+
    "\13\35\1\0\11\7\1\0\12\7\11\0\1\35\1\7"+
    "\2\35\1\7\1\0\1\35\2\0\4\35\1\207\12\35"+
    "\1\0\11\7\1\0\12\7\11\0\1\35\1\7\2\35"+
    "\1\7\1\0\1\35\2\0\1\35\1\210\15\35\1\0"+
    "\11\7\1\0\12\7\11\0\5\7\1\0\1\7\2\0"+
    "\2\7\1\211\14\7\1\0\11\7\1\0\12\7\11\0"+
    "\5\7\1\0\1\7\2\0\5\7\1\212\11\7\1\0"+
    "\11\7\1\0\12\7\11\0\2\7\1\213\2\7\1\0"+
    "\1\7\2\0\17\7\1\0\11\7\1\0\12\7\13\0"+
    "\1\214\120\0\1\215\76\0\1\216\62\0\1\217\61\0"+
    "\1\220\73\0\1\221\60\0\1\222\25\0\1\35\1\7"+
    "\2\35\1\7\1\0\1\35\2\0\2\35\1\223\14\35"+
    "\1\0\11\7\1\0\12\7\11\0\1\35\1\7\2\35"+
    "\1\7\1\0\1\35\2\0\5\35\1\224\11\35\1\0"+
    "\11\7\1\0\12\7\11\0\1\35\1\7\1\225\1\35"+
    "\1\7\1\0\1\35\2\0\17\35\1\0\11\7\1\0"+
    "\12\7\11\0\5\7\1\0\1\7\2\0\4\7\1\226"+
    "\12\7\1\0\11\7\1\0\12\7\11\0\5\7\1\0"+
    "\1\7\2\0\6\7\1\227\10\7\1\0\11\7\1\0"+
    "\12\7\11\0\5\7\1\0\1\7\2\0\12\7\1\230"+
    "\4\7\1\0\11\7\1\0\12\7\50\0\1\231\71\0"+
    "\1\232\71\0\1\233\20\0\1\234\65\0\1\235\120\0"+
    "\1\236\76\0\1\237\17\0\1\35\1\7\2\35\1\7"+
    "\1\0\1\35\2\0\4\35\1\240\12\35\1\0\11\7"+
    "\1\0\12\7\11\0\1\35\1\7\2\35\1\7\1\0"+
    "\1\35\2\0\6\35\1\241\10\35\1\0\11\7\1\0"+
    "\12\7\11\0\1\35\1\7\2\35\1\7\1\0\1\35"+
    "\2\0\12\35\1\242\4\35\1\0\11\7\1\0\12\7"+
    "\11\0\5\7\1\0\1\7\2\0\5\7\1\243\11\7"+
    "\1\0\11\7\1\0\12\7\11\0\5\7\1\0\1\7"+
    "\2\0\7\7\1\244\7\7\1\0\11\7\1\0\12\7"+
    "\11\0\5\7\1\0\1\7\2\0\13\7\1\245\3\7"+
    "\1\0\11\7\1\0\12\7\46\0\1\246\65\0\1\247"+
    "\73\0\1\250\67\0\1\251\65\0\1\252\63\0\1\253"+
    "\71\0\1\254\16\0\1\35\1\7\2\35\1\7\1\0"+
    "\1\35\2\0\5\35\1\255\11\35\1\0\11\7\1\0"+
    "\12\7\11\0\1\35\1\7\2\35\1\7\1\0\1\35"+
    "\2\0\7\35\1\256\7\35\1\0\11\7\1\0\12\7"+
    "\11\0\1\35\1\7\2\35\1\7\1\0\1\35\2\0"+
    "\13\35\1\257\3\35\1\0\11\7\1\0\12\7\11\0"+
    "\5\7\1\0\1\7\2\0\6\7\1\260\10\7\1\0"+
    "\11\7\1\0\12\7\11\0\5\7\1\0\1\7\2\0"+
    "\2\7\1\261\14\7\1\0\11\7\1\0\12\7\51\0"+
    "\1\262\63\0\1\263\31\0\1\264\120\0\1\265\65\0"+
    "\1\266\65\0\1\267\73\0\1\270\22\0\1\35\1\7"+
    "\2\35\1\7\1\0\1\35\2\0\6\35\1\271\10\35"+
    "\1\0\11\7\1\0\12\7\11\0\1\35\1\7\2\35"+
    "\1\7\1\0\1\35\2\0\2\35\1\272\14\35\1\0"+
    "\11\7\1\0\12\7\11\0\5\7\1\0\1\7\2\0"+
    "\7\7\1\273\7\7\1\0\11\7\1\0\12\7\11\0"+
    "\5\7\1\0\1\7\2\0\4\7\1\274\12\7\1\0"+
    "\11\7\1\0\12\7\52\0\1\275\57\0\1\276\77\0"+
    "\1\277\63\0\1\300\65\0\1\301\60\0\1\302\31\0"+
    "\1\303\63\0\1\35\1\7\2\35\1\7\1\0\1\35"+
    "\2\0\7\35\1\304\7\35\1\0\11\7\1\0\12\7"+
    "\11\0\1\35\1\7\2\35\1\7\1\0\1\35\2\0"+
    "\4\35\1\305\12\35\1\0\11\7\1\0\12\7\11\0"+
    "\5\7\1\0\1\7\2\0\12\7\1\306\4\7\1\0"+
    "\11\7\1\0\12\7\42\0\1\307\74\0\1\310\62\0"+
    "\1\311\65\0\1\312\65\0\1\313\63\0\1\314\77\0"+
    "\1\315\20\0\1\35\1\7\2\35\1\7\1\0\1\35"+
    "\2\0\12\35\1\316\4\35\1\0\11\7\1\0\12\7"+
    "\11\0\5\7\1\0\1\7\2\0\10\7\1\317\6\7"+
    "\1\0\11\7\1\0\12\7\53\0\1\320\71\0\1\321"+
    "\62\0\1\322\60\0\1\323\65\0\1\324\67\0\1\325"+
    "\62\0\1\326\30\0\1\35\1\7\2\35\1\7\1\0"+
    "\1\35\2\0\10\35\1\327\6\35\1\0\11\7\1\0"+
    "\12\7\60\0\1\330\53\0\1\331\63\0\1\332\65\0"+
    "\1\333\100\0\1\334\62\0\1\335\65\0\1\336\60\0"+
    "\1\337\67\0\1\340\65\0\1\341\74\0\1\342\53\0"+
    "\1\343\72\0\1\344\56\0\1\345\100\0\1\346\65\0"+
    "\1\347\62\0\1\350\60\0\1\351\67\0\1\352\74\0"+
    "\1\353\65\0\1\354\60\0\1\355\56\0\1\356\100\0"+
    "\1\357\62\0\1\360\65\0\1\361\62\0\1\362\74\0"+
    "\1\363\60\0\1\364\65\0\1\365\71\0\1\366\62\0"+
    "\1\367\71\0\1\370\60\0\1\371\66\0\1\372\64\0"+
    "\1\373\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11826];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\4\1\1\11\2\1\2\11\6\1\3\11"+
    "\24\1\6\0\1\11\15\1\7\0\12\1\7\0\12\1"+
    "\7\0\11\1\7\0\7\1\7\0\6\1\7\0\6\1"+
    "\7\0\6\1\7\0\5\1\7\0\4\1\7\0\3\1"+
    "\7\0\2\1\1\11\6\0\1\1\14\0\1\11\10\0"+
    "\1\11\6\0\2\11\3\0\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[251];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    // This adds support for nested states. I'm no JFlex pro, so maybe this is overkill, but it works quite well.
    private final java.util.LinkedList<Integer> states = new java.util.LinkedList();

    private void yypushstate(int state) {
        states.addFirst(yystate());
        yybegin(state);
    }
    private void yypopstate() {
        final int state = states.removeFirst();
        yybegin(state);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  RmsLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 31: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 32: break;
          case 3: 
            { return RmsTypes.FILENAME;
            } 
            // fall through
          case 33: break;
          case 4: 
            { return RmsTypes.CONST_NAME;
            } 
            // fall through
          case 34: break;
          case 5: 
            { return RmsTypes.INT;
            } 
            // fall through
          case 35: break;
          case 6: 
            { return RmsTypes.LEFT_BRACKET;
            } 
            // fall through
          case 36: break;
          case 7: 
            { return RmsTypes.RIGHT_BRACKET;
            } 
            // fall through
          case 37: break;
          case 8: 
            { return RmsTypes.LEFT_PARENTHESIS;
            } 
            // fall through
          case 38: break;
          case 9: 
            { return RmsTypes.RIGHT_PARENTHESIS;
            } 
            // fall through
          case 39: break;
          case 10: 
            { return RmsTypes.COMMA;
            } 
            // fall through
          case 40: break;
          case 11: 
            { 
            } 
            // fall through
          case 41: break;
          case 12: 
            { return RmsTypes.COMMAND_NAME;
            } 
            // fall through
          case 42: break;
          case 13: 
            { return RmsTypes.KEYWORD_HASHMACRO;
            } 
            // fall through
          case 43: break;
          case 14: 
            { return RmsTypes.IF_STATEMENT;
            } 
            // fall through
          case 44: break;
          case 15: 
            { yypushstate(IN_COMMENT);
            } 
            // fall through
          case 45: break;
          case 16: 
            { yypopstate(); return RmsTypes.COMMENT;
            } 
            // fall through
          case 46: break;
          case 17: 
            { return RmsTypes.RND;
            } 
            // fall through
          case 47: break;
          case 18: 
            { return RmsTypes.ELSE_STATEMENT;
            } 
            // fall through
          case 48: break;
          case 19: 
            { return RmsTypes.ENDIF_STATEMENT;
            } 
            // fall through
          case 49: break;
          case 20: 
            { return RmsTypes.ELSEIF_STATEMENT;
            } 
            // fall through
          case 50: break;
          case 21: 
            { return RmsTypes.END_RANDOM;
            } 
            // fall through
          case 51: break;
          case 22: 
            { return RmsTypes.START_RANDOM;
            } 
            // fall through
          case 52: break;
          case 23: 
            { return RmsTypes.PERCENT_CHANCE;
            } 
            // fall through
          case 53: break;
          case 24: 
            { yybegin(IN_PLAYER_SETUP); return RmsTypes.HEADER_PLAYER_SETUP;
            } 
            // fall through
          case 54: break;
          case 25: 
            { yybegin(IN_LAND_GENERATION); return RmsTypes.HEADER_LAND_GENERATION;
            } 
            // fall through
          case 55: break;
          case 26: 
            { yybegin(IN_CLIFF_GENERATION); return RmsTypes.HEADER_CLIFF_GENERATION;
            } 
            // fall through
          case 56: break;
          case 27: 
            { yybegin(IN_TERRAIN_GENERATION); return RmsTypes.HEADER_TERRAIN_GENERATION;
            } 
            // fall through
          case 57: break;
          case 28: 
            { yybegin(IN_OBJECTS_GENERATION); return RmsTypes.HEADER_OBJECTS_GENERATION;
            } 
            // fall through
          case 58: break;
          case 29: 
            { yybegin(IN_ELEVATION_GENERATION); return RmsTypes.HEADER_ELEVATION_GENERATION;
            } 
            // fall through
          case 59: break;
          case 30: 
            { yybegin(IN_CONNECTION_GENERATION); return RmsTypes.HEADER_CONNECTION_GENERATION;
            } 
            // fall through
          case 60: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
